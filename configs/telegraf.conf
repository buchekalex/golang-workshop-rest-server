# Global tags can be specified here in key="value" format.
[global_tags]
  # dc = "us-east-1" # will tag all metrics with dc=us-east-1
  # rack = "1a"
  ## Environment variables can be used as tags, and throughout the config file
  # user = "$USER"

[agent]
  interval = "10s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "10s"
  flush_jitter = "0s"
  precision = ""
  debug = false
  quiet = false
  hostname = ""
  omit_hostname = false

# Configuration for influxdb server to send metrics to
[[outputs.influxdb]]
  urls = ["http://influxdb:8086/"]
  database = "telegraf"
  timeout = "5s"
  username = "telegraf"
  password = "metricsmetricsmetricsmetrics"
  user_agent = "telegraf"
  write_consistency = "any"

#
#   ## Retention policy to write to.
# #   retention_policy = "default"
#   ## Write consistency (clusters only), can be: "any", "one", "quorom", "all"
#   write_consistency = "any"
#
#   ## Write timeout (for the InfluxDB client), formatted as a string.
#   ## If not provided, will default to 5s. 0s means no timeout (not recommended).
#   timeout = "5s"
#   username = "telegraf"
#   password = "metricsmetricsmetricsmetrics"
#   ## Set the user agent for HTTP POSTs (can be useful for log differentiation)
#   user_agent = "telegraf"
#   ## Set UDP payload size, defaults to InfluxDB UDP Client default (512 bytes)
#   # udp_payload = 512
#
#   ## Optional SSL Config
#   # ssl_ca = "/etc/telegraf/ca.pem"
#   # ssl_cert = "/etc/telegraf/cert.pem"
#   # ssl_key = "/etc/telegraf/key.pem"
#   ## Use SSL but skip chain & host verification
#   # insecure_skip_verify = false


# Read metrics from one or many MongoDB servers
[[inputs.mongodb]]
  ## An array of URLs of the form:
  ##   "mongodb://" [user ":" pass "@"] host [ ":" port]
  ## For example:
  ##   mongodb://user:auth_key@10.10.3.30:27017,
  ##   mongodb://10.10.3.33:18832,
  ##
  ## If connecting to a cluster, users must include the "?connect=direct" in
  ## the URL to ensure that the connection goes directly to the specified node
  ## and not have all connections passed to the master node.
  servers = ["mongodb://mongodb:27017/?connect=direct"]

  ## When true, collect cluster status.
  ## Note that the query that counts jumbo chunks triggers a COLLSCAN, which
  ## may have an impact on performance.
  gather_cluster_status = true

  ## When true, collect per database stats
  gather_perdb_stats = true

  ## When true, collect per collection stats
  gather_col_stats = true

  ## When true, collect usage statistics for each collection
  ## (insert, update, queries, remove, getmore, commands etc...).
  gather_top_stat = true

  ## List of db where collections stats are collected
  ## If empty, all db are concerned
  # col_stats_dbs = ["local"]

  ## Optional TLS Config
  # tls_ca = "/etc/telegraf/ca.pem"
  # tls_cert = "/etc/telegraf/cert.pem"
  # tls_key = "/etc/telegraf/key.pem"
  ## Use TLS but skip chain & host verification
  # insecure_skip_verify = false

  ## Specifies plugin behavior regarding disconnected servers
  ## Available choices :
  ##   - error: telegraf will return an error on startup if one the servers is unreachable
  ##   - skip: telegraf will skip unreachable servers on both startup and gather
  # disconnected_servers_behavior = "error"
[[inputs.http_listener_v2]]
  service_address = ":8080"
  data_format = "json"

[[inputs.net]]
#   ## By default, telegraf gathers stats from any up interface (excluding loopback)
#   ## Setting interfaces will tell it to gather these explicit interfaces,
#   ## regardless of status.
#   ##
interfaces = ["eth0,eth1,lo"]
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics.
  collect_cpu_time = false
# Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default, telegraf gather stats for all mountpoints.
  ## Setting mountpoints will restrict the stats to the specified mountpoints.
  # mount_points = ["/"]
  ## Ignore some mountpoints by filesystem type. For example (dev)tmpfs (usually
  ## present on /run, /var/run, /dev/shm or /dev).
  ignore_fs = ["tmpfs", "devtmpfs"]
# Read metrics about disk IO by device
[[inputs.diskio]]
  ## By default, telegraf will gather stats for all devices including
  ## disk partitions.
  ## Setting devices will restrict the stats to the specified devices.
  # devices = ["sda", "sdb"]
  ## Uncomment the following line if you need disk serial numbers.
  # skip_serial_number = false

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  # no configuration

# Read metrics about memory usage
[[inputs.mem]]
  # no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  # no configuration

# Read metrics about swap memory usage
[[inputs.swap]]
[[inputs.system]]
[[inputs.netstat]]

# # Read metrics about docker containers
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  gather_services = false
  container_name_include = []
  container_name_exclude = []
  timeout = "30s"
  docker_label_exclude = []
  perdevice_include = []
  total = false
  docker_label_include = ["docker.group"]


# [[inputs.nginx]]
#      urls = ["http://nginx/nginx_status"]
#
[[inputs.nginx]]
     urls = ["http://nginx/nginx_status"]

[[inputs.logparser]]
  files = ["/var/log/nginx/access.log"]
  from_beginning = true
  name_override = "nginx_access_log"
  [inputs.logparser.grok]
    patterns = ["%{COMBINED_LOG_FORMAT}"]

[[inputs.tail]]
  files = ["/var/log/nginx/access.log"]
  from_beginning = true
  name_override = "nginx_access_log"
  data_format = "grok"
  grok_patterns = ["%{COMBINED_LOG_FORMAT}"]


 [[inputs.elasticsearch]]
  servers = ["http://elasticsearch:9200"]
  #
  #
  ## Timeout for HTTP requests to the elastic search server(s)
  http_timeout = "9s"
  #
  #
  ## When local is true (the default), the node will read only its own stats.
  #
  ## Set local to false when you want to read the node stats from all nodes
  #
  ## of the cluster.
  local = true
  #
  #
  ## Set cluster_health to true when you want to also obtain cluster health stats
  cluster_health = true
  #
  #
  ## Set cluster_stats to true when you want to also obtain cluster stats from the
  #
  ## Master node.
  cluster_stats = true
